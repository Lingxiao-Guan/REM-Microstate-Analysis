...
% N = Seted; % var therhold, Set_from_Judgement
epochDuration = 2; % 
significantPercentage = 0.5;  % 
uvThreshold = 85; % 
samplingRate = 256;
plotFlag = 1;
[completeDataset,phasicSegmentLengths,epoch_lengthes_tonic,totalSleepTime] = Function_REM_SubStages_WithEpoch(signalData,plotFlag, thresholdFactor,epochDuration,samplingRate,significantPercentage,uvThreshold);
...


function [completeDataset, phasicSegmentLengths, tonicSegmentLengths, totalSleepTime] = Function_REM_SubStages_WithEpoch(signalData, plotFlag, thresholdFactor, epochDuration, samplingRate, significantPercentage, uvThreshold)
% % % Inputs
  % signalData: A data matrix with aligned EEG, LFP, EOG, Staging...
  % plotFlag: Set to 1 to generate plots for examining the segmentation results; 0 otherwise.
  % thresholdFactor: Multiple of the standard deviation to set the threshold for defining high activity regions. example 0.75
  % epochDuration: Duration in seconds for mini-epoch segmentation. example: 2s
  % samplingRate: Sampling rate of the data. example: 256Hz
  % significantPercentage: Percentage to define a significant epoch. example: 0.5（50%）
  % uvThreshold: Threshold in microvolts for detecting significant deviations in EOG data，example: 85
% % % Outputs
  % completeDataset: The complete dataset including mini epoch labels and Phasic/Tonic distribution.
  % phasicSegmentLengths: lengths of Phasic segment.
  % tonicSegmentLengths: lengths of Tonic segment.
  % totalSleepTime: Total duration of sleep detected in the dataset.
  % Initialize variables

ALL_data = signalData;
labels_all = ones(1, length(signalData(1, :)));
labels_all(signalData(12, :) ~= 5) = nan;
density_all = ones(1, length(signalData(1, :)));
density_all(signalData(12, :) ~= 5) = nan;
ALL_data = signalData(:, signalData(12, :) == 5);
labels = signalData(12, :);
labels_sleep = labels(ismember(labels, [1, 2, 3, 5]));
totalSleepTime = length(labels_sleep) / samplingRate;

% Label processing
labels_Rem = ones(1, length(ALL_data(1, :))) - 2;
EOG_channel = ALL_data(7, :) - ALL_data(8, :);
calcu_var = movvar(EOG_channel, samplingRate); 
x = thresholdFactor * var(EOG_channel);
thresh = calcu_var;
high_part = x >= thresh;
high_start = find(diff([0 high_part]) == -1); 
high_end = find(diff([high_part 0]) == 1); 

% Correct mismatch in high start/end lengths
if length(high_start) ~= length(high_end)
    if high_start(1) < high_end(1)
        high_start(end) = [];
    else
        high_end(1) = [];
    end
end

% Adjust segment lengths based on minimum length
min_length = 1.5; % Minimum length for Phasic segments in seconds
diffs = high_end - high_start;
diff_cut = diffs - samplingRate * min_length;
% transfer_high_end = high_end(diff_cut < 0);
% transfer_high_start = high_start(diff_cut < 0);
high_end(diff_cut < 0) = [];
high_start(diff_cut < 0) = [];
low_start = [1, high_end + 1];
low_end = [high_start - 1, length(calcu_var)];

% Label segments based on thresholds
for i = 1:length(low_start)
    labels_Rem(low_start(i):low_end(i)) = 0; % Tonic
end

% Process high activity segments
jmat = [];
for j = 1:length(high_start)
    eognow1 = ALL_data(7, high_start(j):high_end(j));
    eognow2 = ALL_data(8, high_start(j):high_end(j));
    if max(abs(eognow1)) >= [] || max(abs(eognow2)) >= []  % -------  Artifact thershold  ------- 
        labels_Rem(high_start(j):high_end(j)) = 2; % artifact
        jmat = [jmat, j];
    elseif (max(abs(eognow1)) >= uvThreshold && max(abs(eognow2)) >= uvThreshold)
        labels_Rem(high_start(j):high_end(j)) = 1; % phasic activity
    else
        labels_Rem(high_start(j):high_end(j)) = 0; % tonic activity
        jmat = [jmat, j];
    end
end

high_start(jmat) = [];
high_end(jmat) = [];
phasicSegmentLengths = high_end - high_start + 1;
if high_start(1) == 1
    if high_end(end) == length(calcu_var)
       low_start = high_end(1:end-1);
       low_end = high_start(2:end);
    else
       low_start = high_end;
       low_end = high_start;
    end
else 
    if high_end(end) == length(calcu_var)
       low_start = [1, high_end(1:end-1)];
       low_end = high_start;
    else
       low_start = [1, high_end];
       low_end = [high_start, length(calcu_var)];
    end
end

tonicSegmentLengths = low_end - low_start + 1;
% Further processing based on 2-second epochs
label_epoch_mat = reshape(labels_Rem, epochDuration * samplingRate, length(labels_Rem) / (epochDuration * samplingRate));
n1 = epochDuration * samplingRate * significantPercentage; % 50 percent define
n2 = 1 * epochDuration * samplingRate; % 50 percent define
for p = 1:length(label_epoch_mat(1, :))
    if sum(label_epoch_mat(:, p)) >= n1 && sum(label_epoch_mat(:, p)) <= n2
        label_epoch_mat(:, p) = 1;
    elseif sum(label_epoch_mat(:, p)) < n1
        label_epoch_mat(:, p) = 0;
    elseif sum(label_epoch_mat(:, p)) > n2
        label_epoch_mat(:, p) = 2;
    end
end
label_epoch = reshape(label_epoch_mat, 1, []);
% 30-second epochs for density calculation
label_density_mat = reshape(label_epoch, 30 * samplingRate, length(labels_Rem) / (30 * samplingRate));
for p = 1:length(label_density_mat(1, :))
    Phasic_nums_loop = sum(label_density_mat(:, p));
    density_loop = Phasic_nums_loop / (length(label_density_mat(:, p)));
    label_density_mat(:, p) = density_loop;
end
label_epoch_density = reshape(label_density_mat, 1, []);
% Reintegrate 2-second labels into the overall labels
[peaks, peakLocations] = findpeaks(signalData(12, :));
peakLocations(peaks ~= 5) = [];
peaks(peaks ~= 5) = [];

[peaks_reverse, peakLocations_reverse] = findpeaks(flip(signalData(12, :)));
peakLocations_reverse(peaks_reverse ~= 5) = [];
peaks_reverse(peaks_reverse ~= 5) = [];
peakLocations_reverse = length(signalData(12, :)) - peakLocations_reverse;
peaks_reverse = flip(peaks_reverse);

REM_starts = peakLocations;
REM_Ends = peakLocations_reverse + 1;
REM_Ends = flip(REM_Ends);
starts = 1;
for k = 1:length(REM_starts)
    add = label_epoch(starts:(REM_Ends(k) - REM_starts(k) + starts));
    add2 = label_epoch_density(starts:(REM_Ends(k) - REM_starts(k) + starts));
    labels_all(REM_starts(k):REM_Ends(k)) = add;
    density_all(REM_starts(k):REM_Ends(k)) = add2;
    starts = starts + REM_Ends(k) - REM_starts(k) + 1;
end
Whole_1 = [signalData; labels_all];
completeDataset = [Whole_1; density_all];

% Plot results for verification
if plotFlag == 1
    figure('Color', [1 1 1]);
    AX1 = subplot(8, 1, 1);
    plot((1:length(ALL_data(7, :))) / samplingRate, ALL_data(7, :));
    ylim([-100 100]);
    hold on;
    box off;
    xlabel('Time (s)', 'FontName', 'Times New Roman');
    ylabel('Amp (uv)', 'FontName', 'Times New Roman');
    title('Channel: EOG1', 'FontName', 'Times New Roman');

    AX2 = subplot(8, 1, 2);
    plot((1:length(ALL_data(8, :))) / samplingRate, ALL_data(8, :));
    ylim([-100 100]);
    hold on;

    box off;
    xlabel('Time (s)', 'FontName', 'Times New Roman');
    ylabel('Amp (uv)', 'FontName', 'Times New Roman');
    title('Channel: EOG2', 'FontName', 'Times New Roman');

    AX3 = subplot(8, 1, [3, 4]);
    plot((1:length(EOG_channel)) / samplingRate, EOG_channel);
    ylim([-100 100]);
    hold on;
    for i = 1:length(high_start)
        fill([high_start(i) / samplingRate, high_end(i) / samplingRate, high_end(i) / samplingRate, high_start(i) / samplingRate], [-100, -100, 100, 100], [078 158 180] / 256, 'FaceAlpha', 0.2, 'EdgeColor', 'none');
    end
    hold on;
    plot((1:length(ALL_data(7, :))) / samplingRate, label_epoch * 50 - 250, 'Color', [255 / 256, 130 / 256, 131 / 256], 'LineWidth', 2);
    try
        plot((1:length(ALL_data(7, :))) / samplingRate, label_epoch_density * 200 + 100, 'Color', [255 / 256, 130 / 256, 131 / 256], 'LineWidth', 2);
    end
    box off;
    xlabel('Time (s)', 'FontName', 'Times New Roman');
    ylabel('Amp (uv)', 'FontName', 'Times New Roman');
    title('Channel: EOG2-EOG1', 'FontName', 'Times New Roman');

    AX4 = subplot(8, 1, [5, 6]);
    plot((1:length(calcu_var)) / samplingRate, calcu_var);
    hold on;
    plot((1:length(ALL_data)) / samplingRate, ones(length(ALL_data), 1) * x);
    ylim([0 600]);
    xlabel('Time (s)', 'FontName', 'Times New Roman');
    ylabel('Moved Var (uv^2)', 'FontName', 'Times New Roman');
    subtitle('Moved Var', 'FontName', 'Times New Roman');
    box off;

    AX5 = subplot(8, 1, [7, 8]);
    PMTM_window = 2;
    [Pxx1, F1, ~, ~, ~, ~] = f1_PSGprocess_calcu_plot_PMTM(EOG_channel, 1, 1, PMTM_window, samplingRate, 5, 10, 12);
    close;
    pcolor(((1:length(Pxx1(1, :))) * PMTM_window), F1, 10 * log10(abs(Pxx1)));
    shading interp;
    colormap jet;
    axis xy;
    xlabel('Time (s)', 'FontName', 'Times New Roman');
    ylabel('Frequency', 'FontName', 'Times New Roman');
    subtitle('T-F of Eog', 'FontName', 'Times New Roman');
    caxis([-10 25]);
    ylim([0 30]);
    linkaxes([AX1, AX2, AX3, AX4, AX5], 'x');
    xlim([6 10]);
end
end
