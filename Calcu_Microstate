function [Whole,epoch_lengthes_phasic,epoch_lengthes_tonic,ALL_length] = Function_REM_SubStages_WithEpoch(Data,exam,moved,nstd,Mini_Epoch,fs,percen,numUV,numUV2)
% 函数说明：划分亚分期
% 输入结构：[Phasic_Parts,Tonic_Parts] = Function_REM_SubStages(Data,exam,moved,nstd,fs)
%           输入：Data:channel_num*data 矩阵,输入可以是整体
%                 exam:是否绘图以检查结果（1=绘图；0=不绘图）
%                 moved:计算亚分期时的平均窗长
%                 nsted:几倍于STD阈值
%                 numUV:每个通道超过多少uv
%                 fs:采样率
%                 Mini_epochs:以秒分段并加入标签中去
%           输出：Whole:输出全部数据，包括mini epoch的标签、Phasic/Tonic distribution
%                 epoch_lengthes_phasic: 每一段Phasic的长度
%                 epoch_lengthes_tonic: 每一段Tonic的长度
%                 ALL_length: 总睡眠时长

ALL_calcu_change = Data;
labels_all = ones(1,length(ALL_calcu_change(1,:)));
labels_all(Data(12,:)~=5) = nan;
density_all =  ones(1,length(ALL_calcu_change(1,:)));
density_all(Data(12,:)~=5) = nan;
ALL_calcu_change = Data(:,Data(12,:)==5);
labels = Data(12,:);
labels_sleep = labels(labels == 1 | labels == 2 | labels == 3 | labels == 5);
ALL_length = length(labels_sleep)/fs;

labels_Rem = ones(1,length(ALL_calcu_change(1,:)))-2; % -1为无分期
   EOG_channel =  ALL_calcu_change(7,:)-ALL_calcu_change(8,:);  %采用差来区分
   k = moved*fs; % 移动方差的大小，10s作为一次滑动
   calcu_var = movvar(EOG_channel,k); % Ori
   % calcu_var = movstd(EOG_channel,k);
   min_length = 1.5;%设置Phasic最小的片段长度
% proc = 14*std(EOG_channel) - calcu_var;
thresh = calcu_var;
%%\
x = nstd*var(EOG_channel); % Ori阈值
% x = nstd*std(EOG_channel); % Ori阈值
% x = mean(calcu_var)+nstd*std(calcu_var); % 阈值
%%
high_part = x >= thresh;
high_start = find(diff([0 high_part]) == -1); % Phasic开始点
high_end = find(diff([high_part 0]) == 1); % 结束点,tonic结束点，phasic开始

if length(high_start) ~= length(high_end)
    if high_start(1)<high_end(1)
        high_start(end) = [];
    else
        high_end(1) = [];
    end
end
diff_vector = abs(diff(high_start));
low_start = [1,high_end+1];
low_end = [high_start-1,length(calcu_var)];


diffs = high_end - high_start;
diff_cut = diffs-fs*min_length;
transfer_high_end = high_end(find(diff_cut<0));
transfer_high_start = high_start(find(diff_cut<0));
high_end(find(diff_cut<0)) = [];
high_start(find(diff_cut<0)) = [];
low_start = [low_start,transfer_high_start];
low_end = [low_end,transfer_high_end];
low_start = sort(low_start);
low_end = sort(low_end);

for i = 1:length(low_start)
    labels_Rem(low_start(i):low_end(i)) = 0;
end

jmat =[];
for j = 1:length(high_start)

    eognow1 = ALL_calcu_change(7,high_start(j):high_end(j));
    eognow2 = ALL_calcu_change(8,high_start(j):high_end(j));
    if max(abs(eognow1(:))) >= 800 || max(abs(eognow2(:))) >= 800 
        labels_Rem(high_start(j):high_end(j)) = 2;
        jmat = [jmat,j];
    elseif (max(abs(eognow1(:))) >= numUV || max(abs(eognow2(:))) >= numUV) && (max(abs([eognow1(:)])) >= numUV2 && max(abs([eognow2(:)])) >= numUV2 )
    % elseif (max(abs(eognow1(:))) >= numUV || max(abs(eognow2(:))) >= numUV)
        labels_Rem(high_start(j):high_end(j)) = 1;
        
    else
        labels_Rem(high_start(j):high_end(j)) = 0;
        jmat = [jmat,j];
    end
end

high_start(jmat) = [];
high_end(jmat) = [];
epoch_lengthes_phasic = high_end-high_start+1;
if high_start(1) == 1
    if high_end(end) == length(calcu_var)
       low_start = high_end(1:end-1);
       low_end = high_start(2:end);
    else
       low_start = high_end;
       low_end = high_start;
    end
else 
    if high_end(end) == length(calcu_var)
       low_start = [1,high_end((1:end-1))];
       low_end = high_start;
    else
       low_start = [1,high_end];
       low_end = [high_start,length(calcu_var)];
    end

end

epoch_lengthes_tonic = low_end-low_start+1;
%% 根据2s的epoch再去处理标签
label_epoch_mat = reshape(labels_Rem,Mini_Epoch*fs,length(labels_Rem)/(Mini_Epoch*fs));
n1 = Mini_Epoch*fs*percen; % 50 percent define
n2 = 1*Mini_Epoch*fs; % 50 percent define
for p= 1:length(label_epoch_mat(1,:))
    if sum(label_epoch_mat(:,p))>=n1 && sum(label_epoch_mat(:,p))<=n2
        label_epoch_mat(:,p) = 1;
    elseif sum(label_epoch_mat(:,p))<n1
        label_epoch_mat(:,p) = 0;
    elseif sum(label_epoch_mat(:,p))>n2
        label_epoch_mat(:,p) = 2;
    end
end
label_epoch = reshape(label_epoch_mat,1,[]);
%% 根据30s的epoch添加一行密度，30s为一个单位
label_density_mat = reshape(label_epoch,30*fs,length(labels_Rem)/(30*fs));
for p= 1:length(label_density_mat(1,:))
    Phasic_nums_loop = sum(label_density_mat(:,p));
    % Tonic_nums_loop = length(label_epoch(:,p))-Phasic_nums_loop;
    density_loop = Phasic_nums_loop./(length(label_density_mat(:,p)));
    label_density_mat(:,p) = density_loop;
end
label_epoch_density = reshape(label_density_mat,1,[]);
%% 将2s的标签添加回整体的Label中去
[peaks, peakLocations] = findpeaks(Data(12,:));
peakLocations(peaks~=5)=[];
peaks(peaks~=5)=[];

[peaks_reverse, peakLocations_reverse] = findpeaks(flip(Data(12,:)));
peakLocations_reverse(peaks_reverse~=5)=[];
peaks_reverse(peaks_reverse~=5)=[];
peakLocations_reverse = length(Data(12,:))-peakLocations_reverse;
peaks_reverse = flip(peaks_reverse);

REM_starts = peakLocations;
REM_Ends = peakLocations_reverse+1;
REM_Ends = flip(REM_Ends);
starts = 1;
for k = 1:length(REM_starts)
    add = label_epoch(starts:(REM_Ends(k)-REM_starts(k)+starts));
    add2 = label_epoch_density(starts:(REM_Ends(k)-REM_starts(k)+starts));
    labels_all(REM_starts(k):REM_Ends(k)) = add;
    density_all(REM_starts(k):REM_Ends(k)) = add2;
    starts = starts+REM_Ends(k)-REM_starts(k)+1;
end
Whole_1 = [Data;labels_all];
Whole = [Whole_1;density_all];


%% 检查分割的结果与情况
% 绘图进行逐帧检查
if exam == 1
    figure(Color=[1 1 1]);
    AX1 = subplot(8,1,1);
    plot((1:1:length(ALL_calcu_change(7,:)))/fs,ALL_calcu_change(7,:))
    ylim([-100 100])
    hold on
%     for i = 1:length(high_start)
%     hold on
% %     Sequence_Stimu_label(Stimu_Starts(i):Stimu_Stops(i)) = 1;
%     fill([high_start(i)/fs,high_end(i)/fs,high_end(i)/fs,high_start(i)/fs],[-100,-100,100,100],[078 158 180]/256,'FaceAlpha',0.2,'EdgeColor','none');
%     end
    box off
    xlabel('Time (s)',fontname = 'Times New Roman')
    ylabel('Amp (uv)',fontname = 'Times New Roman')
    title('Channel: EOG1',fontname = 'Times New Roman')

    AX2 = subplot(8,1,2);
    plot((1:1:length(ALL_calcu_change(8,:)))/fs,ALL_calcu_change(8,:))
    ylim([-100 100])
    hold on
%     for i = 1:length(high_start)
%     hold on
% %     Sequence_Stimu_label(Stimu_Starts(i):Stimu_Stops(i)) = 1;
%     fill([high_start(i)/fs,high_end(i)/fs,high_end(i)/fs,high_start(i)/fs],[-100,-100,100,100],[078 158 180]/256,'FaceAlpha',0.2,'EdgeColor','none');
%     end

    box off
    xlabel('Time (s)',fontname = 'Times New Roman')
    ylabel('Amp (uv)',fontname = 'Times New Roman')
    title('Channel: EOG2',fontname = 'Times New Roman')

    AX3 = subplot(8,1,[3,4]);
    plot((1:1:length(EOG_channel))/fs,EOG_channel)
    ylim([-100 100])
    hold on
    for i = 1:length(high_start)
    hold on
%     Sequence_Stimu_label(Stimu_Starts(i):Stimu_Stops(i)) = 1;
    fill([high_start(i)/fs,high_end(i)/fs,high_end(i)/fs,high_start(i)/fs],[-100,-100,100,100],[078 158 180]/256,'FaceAlpha',0.2,'EdgeColor','none');
    end
    hold on
    plot((1:1:length(ALL_calcu_change(7,:)))/fs,label_epoch*50-250,Color=[255/256,130/256,131/256],LineWidth=2)
    try
    plot((1:1:length(ALL_calcu_change(7,:)))/fs,label_epoch_density*200+100,Color=[255/256,130/256,131/256],LineWidth=2)
    end
    box off
    xlabel('Time (s)',fontname = 'Times New Roman')
    ylabel('Amp (uv)',fontname = 'Times New Roman')
    title('Channel: EOG2-EOG1',fontname = 'Times New Roman')
    AX4 = subplot(8,1,[5,6]);
    plot((1:1:length(calcu_var))/fs,calcu_var)
    hold on
    plot((1:1:length(ALL_calcu_change))/(fs),ones(length(ALL_calcu_change),1)*(x))
    ylim([0 600])
    xlabel('Time (s)',fontname = 'Times New Roman')
    ylabel('Moved Var (uv^2)',fontname = 'Times New Roman')
    subtitle('Moved Var',fontname = 'Times New Roman')
    box off
    AX5 = subplot(8,1,[7,8]);
    PMTM_window = 2;
    [Pxx1,F1,~,~,~,~] = f1_PSGprocess_calcu_plot_PMTM(EOG_channel,1,1,PMTM_window,fs,5,10,12);
    close
    pcolor(((1:1:length(Pxx1(1,:)))*PMTM_window),F1,10*log10(abs(Pxx1)));
    shading interp
    colormap jet
    axis xy
    xlabel('Time (s)',fontname = 'Times New Roman')
    ylabel('Frequency',fontname = 'Times New Roman')
    subtitle('T-F of Eog',fontname = 'Times New Roman')
    caxis([-10 25])
    ylim([0 30])
    linkaxes([AX1,AX2,AX3,AX4,AX5],'x')
    xlim([6 10])
end
